Add environment as a Value.

Add some basic functions:
#env -> returns the environment as a value

(merge-env-in env) -> merges env into current env (only allowed in eval_both)

(filter-env env atomlist) -> returns environment with only atoms listed in atomlist

Extra useful functions:
(lookup environment symbol) -> returns value of identifier

(has-identifier? environment symbol) -> returns true if environment has identifier

import grabs a magic variable #libraries and finds the requested ones and runs merge-env-in on them.

(import (scheme base)
	(extra list)) ->
(merge-env-in (assq (scheme base) #library))
(merge-env-in (assq (extra list) #library))

(define-library namelist
  (export atom1 atom2 ...)
  (import list2)
  (begin
    stuff
  )
) ->
(append2 #library
 (namelist
 (begin
  (import list2)
  stuff
  (filter-env #env (atom1 atom2 ...))
 )
 )
)




(define-library (extra list)
  (export ellist? ellength)
  (import (scheme base))
  (begin
    (define ellist? (lambda (l)
		      (cond ((null? l) #t)
			    ((not (pair? l)) #f)
			    (else (ellist? (cdr l)))
			    )
		      ))
    (define length_tail (lambda (l so_far)
			       (if (null? l) so_far (length_tail (cdr l) (+ 1 so_far)))

			       ))
    (define ellength (lambda (l) (length_tail l 0)))
    )
  )
(import (scheme base)
	(scheme write)
	(extra list))
(display '(list example))
(display (ellist? '(a b)))
(display (ellist? 'a))
(display (ellength '(a b)))
