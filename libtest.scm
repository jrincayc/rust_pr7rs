(define eqlist? (lambda (l1 l2)
		 (cond ((and (null? l1) (null? l2)) #t)
		       ((not (eqv? (car l1) (car l2))) #f)
		       (else (eqlist? (cdr l1) (cdr l2))))
		 ))
(define asslc (lambda (obj l)
  (cond ((null? l) #f)
	((eqlist? obj (car (car l))) (cdr (car l)))
	(else (asslc obj (cdr l)))
	)))
(define list (lambda l l))
(define lib-assoc-list '())
(define lib-assoc-list
  (cons
   (cons '(extra list)
	 (let ()
	   (define ellist? (lambda (l)
			     (cond ((null? l) #t)
				   ((not (pair? l)) #f)
				   (else (ellist? (cdr l)))
				   )
			     ))
	   (define length_tail (lambda (l so_far)
				 (if (null? l) so_far (length_tail (cdr l) (+ 1 so_far)))
				 ))
	   (define ellength (lambda (l) (length_tail l 0)))
	   (list (list 'ellist? ellist?) (list 'ellength ellength))
	   )
	 )
   lib-assoc-list
   )
  )
(display 'Created-environment)
(newline)
(display lib-assoc-list)
(newline)
(display (asslc '(extra list) lib-assoc-list))
(newline)
(define-vars (asslc '(extra list) lib-assoc-list))
(display '(list example))
(newline)
(display (ellist? '(a b)))
(newline)
(display (ellist? 'a))
(newline)
(display (ellength '(a b)))
(newline)
